<?php
/*
 * This file is part of the Arnapou GW2Tools package.
 *
 * (c) Arnaud Buathier <arnaud@arnapou.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace AppBundle\Repository;

use AppBundle\Entity\RaidHistory;
use AppBundle\Entity\RaidRoster;

/**
 * RaidWeekRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RaidHistoryRepository extends \Doctrine\ORM\EntityRepository
{
    const PAGE_SIZE   = 50;
    const NB_ELEMENTS = 10;

    /**
     * @param RaidRoster $roster
     * @param int        $page
     * @return RaidHistory[]
     */
    public function getHistory(RaidRoster $roster, $page = 1)
    {
        return $this->createQueryBuilder('h')
            ->andWhere('h.roster = :roster')
            ->setParameter('roster', $roster)
            ->addOrderBy('h.dateCreation', 'DESC')
            ->getQuery()
            ->setMaxResults(self::PAGE_SIZE)
            ->setFirstResult(self::PAGE_SIZE * ($page - 1))
            ->getResult();
    }

    /**
     * @param RaidRoster $roster
     * @param            $page
     * @return array
     */
    public function getPagination(RaidRoster $roster, &$page)
    {
        $count = $this->createQueryBuilder('h')
            ->select('COUNT(h.id)')
            ->andWhere('h.roster = :roster')
            ->setParameter('roster', $roster)
            ->getQuery()
            ->getSingleScalarResult();

        $nbPages = ceil($count / self::PAGE_SIZE) ?: 1;

        if (empty($page) || !ctype_digit("$page") || $page < 1) {
            $page = 1;
        }
        if ($page > $nbPages) {
            $page = $nbPages;
        }
        $pages = [];

        $left  = $page - self::NB_ELEMENTS / 2;
        $right = $page + self::NB_ELEMENTS / 2;
        if ($left < 1) {
            $right += 1 - $left;
            $left  = 1;
        }
        if ($right > $nbPages) {
            $right = $nbPages;
        }
        if ($left == 2) {
            $left = 1;
        }
        if ($right == $nbPages - 1) {
            $right = $nbPages;
        }
        if ($left != 1) {
            $pages[] = 1;
            $pages[] = '';
        }
        for ($i = $left; $i <= $right; $i++) {
            $pages[] = $i;
        }
        if ($right != $nbPages) {
            $pages[] = '';
            $pages[] = $nbPages;
        }

        return [
            'count'   => $count,
            'size'    => self::PAGE_SIZE,
            'nbpages' => $nbPages,
            'pages'   => $pages,
            'page'   => $page,
            'left'   => $left,
            'right'   => $right,
        ];
    }
}
